name: Build and Push Multi-Arch Images to ECR

on:
  push:
    branches: [ "NOTHING" ] # Your application branch

jobs:
  build-microservices:
    runs-on: ubuntu-latest
    environment: testing

    strategy:
      matrix:
        service: [ "a", "b", "c", "d" ]  # Add each microservice name as needed

    env:
      MY_APP: my-app  # Define my-app as an environment variable
      MANIFEST_BRANCH: manifest  # Branch where manifest exists

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Determine Changed Services
        id: changes
        run: |
          echo "Determining changed directories..."
          changed_files=$(git diff --name-only HEAD^ HEAD)
          for service in "${{ matrix.service }}"; do
            if echo "$changed_files" | grep -q "^${service}/"; then
              echo "service_${service}=true" >> $GITHUB_ENV
            else
              echo "service_${service}=false" >> $GITHUB_ENV
            fi
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        if: env.service_${{ matrix.service }} == 'true'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Log in to Amazon ECR
        if: env.service_${{ matrix.service }} == 'true'
        run: |
          echo "Logging in to ECR..."
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com"

      - name: Set Timestamp Tag
        if: env.service_${{ matrix.service }} == 'true'
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Build and Push Multi-Arch Image
        if: env.service_${{ matrix.service }} == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}  # Dynamically set context to the service directory
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ matrix.service }}:${{ env.TIMESTAMP }}
          outputs: type=image
        env:
          DOCKER_BUILDKIT: 1

      - name: Update ArgoCD Application
        if: env.service_${{ matrix.service }} == 'true'
        run: |
          argocd login a6e8b7620f8164ad9b61fcc507e3bdee-1222634393.ap-south-1.elb.amazonaws.com --username admin --password "${{ secrets.ARGO_PASSWORD }}" --insecure
          argocd app set ${{ env.MY_APP }} \
            -p image.tag=${{ env.TIMESTAMP }} \
            --values-literal-file ./${{ matrix.service }}/helm-manifest/values.yaml
          argocd app actions run ${{ env.MY_APP }} restart --kind Deployment --all
